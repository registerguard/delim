<csr:rule name="custom.rg.ParseDelimStringRule" match="custom:rg:parse:delim:string">
	
	<csr:class super="dt.common.page.Rule,%CSP.RuleBlock" />
	
	<csr:description>
		  Author: Micky Hulse
		 Created: 02/05/09
		Modified: 2011/02/09
		   About: ...
		Examples:
		          set string = "count.0122:Description: 01 goes: here|paperwhite.121808:Description 02 goes here|french_confection:Description 03 goes here"
		          set parentDelim = "|"
		          set childDelim = ":"
		          <h1>Parsing delimited string with two delimeters:</h1>
		          <custom:rg:parse:delim:string string="#(string)#" childDelim="#(childDelim)#" parentDelim="#(parentDelim)#" order="desc" value="foo" key="bar">
		          <p>Item #(bar)#/#(total)#</p>
		          <ul>
		          <li>#(bar)#</li>
		          <csp:while counter="i" condition=(i<foo.Count())>
		          <li>#(foo.GetAt(i))#</li>
		          </csp:while>
		          </ul>
		          </custom:rg:parse:delim:string>
		          <hr>
		          <h1>Not specifying child delimiter:</h1>
		          <custom:rg:parse:delim:string string="#(string)#" parentDelim="#(parentDelim)#" order="desc" value="foo" key="bar">
		          <p>Item #(bar)#/#(total)#</p>
		          <ul>
		          <li>#(bar)#</li>
		          <li>#(foo.GetAt(bar))#</li>
		          </ul>
		          </custom:rg:parse:delim:string>
	</csr:description>
	
	<csr:attribute name="string" description="String with at least one delimiter." type="varname:STRING">
	<csr:attribute name="parentDelim" description="Delimiter type. Default is a '|' (pipe)." type="varname:STRING">
	<csr:attribute name="childDelim" description="Optional child delimiter." type="varname:STRING">
	<csr:attribute name="order" description="The sort order of the returned items, either 'desc' (descending) or 'asc' (ascending). The default is descending order." type="direction:STRING">
	<csr:attribute name="value" description="The name of a local variable in which the value of the retrieved element is to be returned. The default name is 'value'." type="varname:STRING">
	<csr:attribute name="key" description="The name of a local variable in which the key of the retrieved element is to be returned. The default name is 'key'." type="varname:STRING">
	<csr:attribute name="total" description="The name of a local variable in which the total number of parent items is to be returned. The default name is 'total'." type="varname:STRING">
	
	<csr:action>
		
		<script language="cache" runat="compiler">
			do ..RenderDTStartTag()
		</script>
		
		<script language="cache" runat="compiler">
			
			new csr
						
			// Unlike "GetAttribute", "QuoteAttribute" allows us to set #()# variable attributes:
			set csr("string") = ##this.QuoteAttribute("string", "")
			set csr("childDelim") = ##this.QuoteAttribute("childDelim", "")
			set csr("parentDelim") = ##this.QuoteAttribute("parentDelim", "|")
			// Because these next attributes are used to output the children, we can't use QuoteAttribute:
			set csr("order") = $zconvert(##this.GetAttribute("order", "DESC"), "U")
			set csr("value") = ##this.GetAttribute("value", "value")
			set csr("key") = ##this.GetAttribute("key", "key")
			set csr("total") = ##this.GetAttribute("total", "total")
			
			set csr("next") = "Next"
			set:(csr("order") = "ASC") csr("next") = "Previous"
			
			do ..NewBlock()
			set ..EndLabel = ..GetNewLabel()
			set ..NextLabel = ..GetNewLabel()
			
			// Warning: You must/should declare all 'runat="server"' variables as 'new'!
			do ..WriteServer(" new " _ csr("key") _ ", " _ csr("total"))
			do ..WriteServer(" set " _ csr("total") _ " = $length(" _ csr("string") _ ", " _ csr("parentDelim") _ ") ")
			do ..WriteServer(" set " _ csr("key") _ " = """" ")
			do ..WriteServer( ..NextLabel _ " set " _ csr("value") _ " = ##class(custom.rg.Rules).parseDelimString(" _ csr("string") _ ", " _ csr("childDelim") _ "," _ csr("parentDelim") _ ").Get" _ csr("next") _ "(." _ csr("key") _ ") ")
			do ..WriteServer(" if (" _ csr("key") _ " = """") { ")
			do ..WriteServer(" 	goto " _ ..EndLabel _ " ;{ ")
			do ..WriteServer(" } ")
			
			kill csr
			
		</script>
		
		<csr:children>
		
		<script language="cache" runat="compiler">
			
			do ..WriteServer(" goto " _ ..NextLabel)
			do ..WriteServer(..EndLabel _ " ;} ")
			do ..RemoveBlock()
			
		</script>
		
		<script language="Cache" runat="compiler">
			do ..RenderDTEndTag()
		</script>
		
	</csr:action>
	
</csr:rule>
